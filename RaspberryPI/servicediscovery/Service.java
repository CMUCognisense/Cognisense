/**
 * A service has 2 things. Actions it can perform and triggers it can generate.
 * Actions behavior is specified and known to all other services. 
 * While what the service will do on getting a trigger is totally up to the implementation o
 * of the service. The configuration services listen on triggers that other service generate. 
 * They tell other service to perform actions. The behavior of these actions that it tells
 * other service to perform is specified before hand and know to everybody. 
 * Trigger generated is the list of triggers that are generated by the service. 
 * Other services who care about these trigger can register listeners on these triggers. 
 * which is stored in  Set<Trigger> triggers. 
 */

package servicediscovery;

import java.lang.reflect.Method;
import java.util.LinkedList;
import java.util.List;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * this is the service class. Each service has got a unique service ID, a service type, 
 * a list of actions that it supports and a list of triggers that it has listeners on 
 * It also has a various properties associated with the service. 
 * @author parth
 *
 */

public class Service {
		private String serviceid;
		private String serviceType;
		private Map<String,Action> actions;
		private Map<String,Trigger> triggers;
		private List<String> triggersGenerated;
		// property name and the property object
		private Map<String,Property> properties;
		private boolean DEBUG = true;
		
		/**
		 * constructor inilializes a new service
		 */
		public Service() {
			actions = new HashMap<String,Action>();
			triggers = new HashMap<String,Trigger>();
			triggersGenerated = new LinkedList<String>();
			setProperties(new HashMap<String, Property>());
		}
		
		/**
		 * gets the service id
		 * @return
		 */
		public String getServiceid() {
			return serviceid;
		}
		/**
		 * set the service id
		 * @param serviceid
		 */
		public void setServiceid(String serviceid) {
			this.serviceid = serviceid;
		}
		/**
		 * get the service type
		 * @return
		 */
		public String getServiceType() {
			return serviceType;
		}
		
		/**
		 * set the service type
		 * @param serviceType
		 */
		public void setServiceType(String serviceType) {
			this.serviceType = serviceType;
		}
		
		/**
		 * returns all the actions of a particular service
		 * @return a Map of string-Action. The key of this map is the action tag and the value is the action 
		 * object stored in the service. 
		 */
		public Map<String,Action> getActions() {
			return actions;
		}
		
		/**
		 * returns all the triggers of a particular service is listening for
		 * @return a Map of string-Trigger. The key of this map is the trigger name and the value is the trigger 
		 * object stored in the service. 
		 */		
		public Map<String,Trigger> getTriggers() {
			return triggers;
		}

		/**
		 * gets the action object given the action name
		 * @param actionName the action name of the the action 
		 * @return the action object
		 */
		public Action getAction(String actionName) {
			return actions.get(actionName);
		}
		
		/**
		 * gets the trigger object from the trigger name. 
		 * @param triggerName name of the trigger
		 * @return trigger object
		 */
		public Trigger getTrigger(String triggerName) {
			return triggers.get(triggerName);
		}
		
		/**
		 * add the action object to the service
		 * @param action action object to add
		 */
		public void addAction(Action action) {
			actions.put(action.getActionTag(),action);
		}

		/** 
		 * check if the actoin is present in a service or not
		 * @param actionTag the action tag to check
		 * @return the action object of the found action null if not found. 
		 */
		public Action isActionPresent(String actionTag) {
			return actions.get(actionTag);
		}
		
		/**
		 * gets all the properties of the service
		 * @return A map whose key is the property name string and the value is a property object. 
		 */
		public Map<String,Property> getProperties() {
			return properties;
		}

		/**
		 * sets the properties for the service. 
		 * @param properties the input is the map whose key is a string for property name and value is 
		 * the property object. 
		 */
		public void setProperties(Map<String,Property> properties) {
			this.properties = properties;
		}
		
		/**
		 * add property to the service 
		 * @param property the property object
		 */
		public void addProperties(Property property) {
			properties.put(property.getName(), property);
		}
		
		/**
		 * add trigger to the service 
		 * @param trigger the trigger objecct to be added
		 */
		public void addTrigger(Trigger trigger) {
			triggers.put(trigger.getTriggerTag(),trigger);
		}
		
		/**
		 * add triggers generated by the service
		 * @param trigger the trigger name of the generated trigger
		 */
		public void addTriggerGenerated(String trigger) {
			triggersGenerated.add(trigger);
		}

		/**
		 * returns a list of generated triggers. 
		 * @return the list of strings of trigger names generated by the service
		 */
		public List<String> getTriggerGenerated() {
			return triggersGenerated;
		}
		
		/**
		 * calls the match function on the property values given the input Map<String,String> to the match function and returns 
		 * the result of the match. 
		 * @param propertyName the name of the property to be matched
		 * @param propertyAttributes the map to be given as input to the match function of the property 
		 * @return the result of the match function on property sepeified in the name
		 */
		public boolean isPropertyMatching(String propertyName, Map<String, String> propertyAttributes) {
			
			if(properties.get(propertyName) != null)
			{
				if(properties.get(propertyName).match(propertyAttributes))
					return true;
				else
					return false;
			}
			return false;
		}

		/**
		 * checks if the service is listening on this trigger. 
		 * @param triggerName the trigger name the servie is listening on
		 * @return the Trigger object if it is found null if it is not listening. 
		 */
		public Trigger isTriggerPresent(String triggerName) {
			return triggers.get(triggerName);
		}

		/**
		 * gets the property object given the property name
		 * @param propertyName the name of the property
		 * @return the property object in the service if found, null if not found. 
		 */
		public Property getProperty(String propertyName) {
			return properties.get(propertyName);
		}
		
		/**
		 * adds the property in the service
		 * @param propertyName the name of the property
		 * @param property the property object
		 */
		public void setProperty(String propertyName, Property property) {
			properties.put(propertyName, property);
		}
		
		/**
		 * the main function for unit testing
		 * @param args
		 * @throws SecurityException
		 * @throws NoSuchMethodException
		 */
		public static void main(String[] args) throws SecurityException, NoSuchMethodException {
			Service service = new Service();
			service.setServiceType("Speaker");
			String serviceId = "12-323-42343-343-232";
			service.setServiceid(serviceId);
			Method appMethod = Service.class.getMethod("isTriggerPresent", String.class);
			Action action = new Action(appMethod, "isTriggerPresent");
			service.addAction(action);
			Location location = new Location();
			service.addProperties(location);
			
			
		}		
	}
